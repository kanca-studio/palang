// Code generated by MockGen. DO NOT EDIT.
// Source: service/auth/service.go

// Package mock is a generated GoMock package.
package mock

import (
	jwt_go "github.com/dgrijalva/jwt-go"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// AuthService is a mock of Service interface
type AuthService struct {
	ctrl     *gomock.Controller
	recorder *AuthServiceMockRecorder
}

// AuthServiceMockRecorder is the mock recorder for AuthService
type AuthServiceMockRecorder struct {
	mock *AuthService
}

// NewAuthService creates a new mock instance
func NewAuthService(ctrl *gomock.Controller) *AuthService {
	mock := &AuthService{ctrl: ctrl}
	mock.recorder = &AuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *AuthService) EXPECT() *AuthServiceMockRecorder {
	return m.recorder
}

// ValidateToken mocks base method
func (m *AuthService) ValidateToken(tokenString string) (jwt_go.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(jwt_go.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken
func (mr *AuthServiceMockRecorder) ValidateToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*AuthService)(nil).ValidateToken), tokenString)
}

// HashPassword mocks base method
func (m *AuthService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword
func (mr *AuthServiceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*AuthService)(nil).HashPassword), password)
}

// CheckPasswordHash mocks base method
func (m *AuthService) CheckPasswordHash(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash
func (mr *AuthServiceMockRecorder) CheckPasswordHash(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*AuthService)(nil).CheckPasswordHash), password, hash)
}

// CreateToken mocks base method
func (m *AuthService) CreateToken(id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken
func (mr *AuthServiceMockRecorder) CreateToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*AuthService)(nil).CreateToken), id)
}
